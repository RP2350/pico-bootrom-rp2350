/*
 * Copyright (c) 2023 Raspberry Pi (Trading) Ltd.
 *
 * SPDX-License-Identifier: BSD-3-Clause
 */

#pragma once

#define BOOTROM_ARM_SIZE     ${BOOTROM_ARM_SIZE}
#define NSBOOT_SIZE          ${NSBOOT_SIZE}
#define BOOTROM_RISCV_SIZE   ${BOOTROM_RISCV_SIZE}
#define BOOTROM_SG_SIZE      ${BOOTROM_SG_SIZE}

#define BOOTROM_ARM_START    ${BOOTROM_ARM_START}
#define BOOTROM_ARM_END      ${BOOTROM_ARM_END}
#define NSBOOT_START         ${NSBOOT_START}
#define NSBOOT_END           ${NSBOOT_END}
#define NSBOOT_RAM_START     ${NSBOOT_RAM_START}
#define NSBOOT_RAM_END       ${NSBOOT_RAM_END}
#define NSBOOT_VTOR_OFFSET   ${NSBOOT_VTOR_OFFSET}
// this always has thumb bit clear, as varmulet doesn't want one, and this is a BXNS target for ARM
#define NSBOOT_ENTRY_POINT NSBOOT_START
#define BOOTROM_RISCV_START    ${BOOTROM_RISCV_START}
#define BOOTROM_RISCV_END      ${BOOTROM_RISCV_END}
#define BOOTROM_ROMTABLE_SIZE  ${BOOTROM_ROMTABLE_SIZE}
#define BOOTROM_RISCV_END_SIZE ${BOOTROM_RISCV_END_SIZE}
#define BOOTROM_ROMTABLE_START (BOOTROM_RISCV_END - (BOOTROM_RISCV_END_SIZE + BOOTROM_ROMTABLE_SIZE))
#define BOOTROM_SG_START       ${BOOTROM_SG_START}
#define BOOTROM_SG_END         ${BOOTROM_SG_END}
#define BOOTROM_SIZE           ${BOOTROM_SIZE}

#define BOOTRAM_RISCV_STATIC_DATA_START ${BOOTRAM_RISCV_STATIC_DATA_START}
#define BOOTRAM_RISCV_STATIC_DATA_SIZE  ${BOOTRAM_RISCV_STATIC_DATA_SIZE}

#define BOOTRAM_ARM_STATIC_DATA_START   ${BOOTRAM_ARM_STATIC_DATA_START}
#define BOOTRAM_ARM_STATIC_DATA_SIZE    ${BOOTRAM_ARM_STATIC_DATA_SIZE}
#define BOOTROM_IDAU_EXEMPT_END         ${BOOTROM_IDAU_EXEMPT_END}

#define BOOTRAM_PREBOOT_STACK_SIZE    ${BOOTRAM_PREBOOT_STACK_SIZE}
#define MAX_XIP_SETUP_SIZE            ${MAX_XIP_SETUP_SIZE}
#define BOOTRAM_ALWAYS_SIZE           ${BOOTRAM_ALWAYS_SIZE}
#define BOOTRAM_RUNTIME_PER_CORE_SIZE ${BOOTRAM_RUNTIME_PER_CORE_SIZE}

#define BOOTRAM_PREBOOT_STATE_SIZE 0x08
#define VARMULET_CPU_STATE_SIZE    0x50 // sizeof (armulet_cpu_t)

//#define BOOTRAM_RISCV_PREBOOT_STACK_SIZE (BOOTRAM_ARM_PREBOOT_STACK_SIZE)
#define BOOTRAM_RUNTIME_CORE0_OFFSET MAX_XIP_SETUP_SIZE
#define BOOTRAM_RUNTIME_CORE1_OFFSET (BOOTRAM_RUNTIME_CORE0_OFFSET + BOOTRAM_RUNTIME_PER_CORE_SIZE)
#define BOOTRAM_PREBOOT_STACK_TOP (BOOTRAM_BASE + BOOTRAM_PREBOOT_STACK_SIZE)
#define BOOTRAM_PREBOOT_STACK_TOP_DWORD_ALIGNED (BOOTRAM_PREBOOT_STACK_TOP & ~7)
#define BOOTRAM_RISCV_PREBOOT_VARMULET_CPU_STATE_OFFSET 0
#define BOOTRAM_XIP_SETUP_CODE_OFFSET 0
#define CORE0_BOOT_USBRAM_WORKSPACE_SIZE ${CORE0_BOOT_USBRAM_WORKSPACE_SIZE}
#define CORE0_BOOT_USBRAM_MAX_WORKSPACE_SIZE ${CORE0_BOOT_USBRAM_MAX_WORKSPACE_SIZE}
#define PARSED_BLOCK_LOOP_SIZE ${PARSED_BLOCK_LOOP_SIZE}
#define LARGEST_BOOTSCAN_CONTEXT_SIZE ${LARGEST_BOOTSCAN_CONTEXT_SIZE}
#define CORE0_BOOT_USBRAM_WORKSPACE_SIZE_PADDING_WORDS ${CORE0_BOOT_USBRAM_WORKSPACE_SIZE_PADDING_WORDS}
#define BLOCK_BUFFER_OR_SIGNATURE_WORKSPACE_SIZE ${BLOCK_BUFFER_OR_SIGNATURE_WORKSPACE_SIZE}
#define HACK_STACK_WORDS ${HACK_STACK_WORDS}
#ifndef __ASSEMBLER__
#include <assert.h>
#include "hardware/regs/addressmap.h"
static_assert(${BOOTRAM_BASE} == BOOTRAM_BASE, "");
static_assert(BOOTROM_SG_END == BOOTROM_ARM_START + BOOTROM_SIZE, "");

#define CMAKE_PICOBIN_MAX_BLOCK_SIZE ${PICOBIN_MAX_BLOCK_SIZE}
#define CMAKE_PICOBIN_MAX_IMAGE_DEF_BLOCK_SIZE ${PICOBIN_MAX_IMAGE_DEF_BLOCK_SIZE}
#define CMAKE_PICOBIN_MAX_PARTITION_TABLE_BLOCK_SIZE ${PICOBIN_MAX_PARTITION_TABLE_BLOCK_SIZE}

#endif
