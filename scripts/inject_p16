#!/usr/bin/env python3
import argparse, sys

parser = argparse.ArgumentParser(description="Replace 16 bit pointers in ELF")

parser.add_argument("input", help="Input ELF")
parser.add_argument("symbols", help="Input symbol file")
parser.add_argument("output", help="Output ELF")
#parser.add_argument("prefix", help="Prefix added to names names of exported symbols (pass NO_PREFIX for none)")
parser.add_argument("p16_symbols", help="symbol name(s) required", nargs="*")

args = parser.parse_args()

fin = open(args.input, mode="rb")
# Reading file data with read() method
contents = fin.read()
fin.close()

symbol_counts = {}
ordered_symbol_names = []
data_symbol_names = {}
for symbol in args.p16_symbols:
    parts = symbol.split("/")
    attr = parts[1]
    if attr[0] == 'd':
        data_symbol_names[parts[0]] = True
        attr = attr[1:]
    else:
        data_symbol_names[parts[0]] = False
    symbol_counts[parts[0]] = int(attr)
    ordered_symbol_names = ordered_symbol_names + [parts[0]]

symbol_addresses = {}
fin = open(args.symbols, "r")
for line in fin:
    values = line.split()
    if len(values) > 2:
        symbol_addresses[values[2]] = int(values[0], 16)
fin.close()

for i in range(0,len(contents)-4,2):
    if contents[i] == 0x4b and contents[i+1] == 0xf6 and contents[i+3] >= 0x30 and contents[i+3] <= 0x3f:
        symbol_name = ordered_symbol_names[contents[i+2]]
        addr = symbol_addresses[symbol_name]
        if addr > 0xffff:
            raise SystemExit("address {} is out of range".format(hex(addr)))
        if not data_symbol_names[symbol_name]:
            addr = addr + 1
        # print("{} is '{}' {}".format(i, symbol_name, hex(addr)))
        word0 = 0xf240 + (addr >> 12) + (0x400 if addr & (1 << 11) else 0)
        word1 = ((contents[i+3] & 0xf) << 8) + (addr & 0xff) + (((addr >> 8) & 7) << 12)
        contents = contents[:i] + word0.to_bytes( 2, 'little') + word1.to_bytes(2, 'little') + contents[i+4:]
        symbol_counts[symbol_name] = symbol_counts[symbol_name] - 1

symbol_counts = dict(filter(lambda item: item[1] != 0, symbol_counts.items()))
# we print mismatched-count symbols in a2-64k rather than asserting because the answers are different
print(symbol_counts)
#if len(symbol_counts) > 0:
#    print(symbol_counts)
#    raise SystemExit("unexpected usage counts for p16s")
fout = open(args.output, mode="wb")
fout.write(contents)
fout.close()

